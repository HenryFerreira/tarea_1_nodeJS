<!doctype html>
<html lang="es">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Tablero estudiante</title>
    <link rel="stylesheet" href="https://unpkg.com/mvp.css" />
    <style>
        .topbar {
            display: flex;
            align-items: center;
            justify-content: space-between;
            background: #0f172a;
            color: #fff;
            padding: 14px 18px;
            border-radius: 8px;
        }

        .topbar a.btn {
            background: #1f2937;
            color: #fff;
            padding: 8px 12px;
            border-radius: 6px;
        }

        .badge {
            display: inline-block;
            padding: .2rem .5rem;
            border-radius: .4rem;
            background: #eef;
        }

        .pill {
            display: inline-block;
            padding: .15rem .5rem;
            border-radius: 999px;
            font-size: .8rem;
        }

        .pill.ok {
            background: #dcfce7;
            color: #166534;
        }

        .pill.no {
            background: #fee2e2;
            color: #991b1b;
        }

        .row-actions {
            white-space: nowrap;
        }

        dialog[open] {
            border: 0;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, .25);
        }

        table td,
        table th {
            vertical-align: middle;
        }

        .subtle {
            color: #6b7280;
            font-size: .95rem;
            margin-top: -6px;
        }

        pre {
            white-space: pre-wrap;
        }
    </style>
</head>

<body>
    <header class="topbar">
        <div>
            <strong>Panel de estudiante</strong><br />
            <span class="subtle">Créditos aprobados y elegibilidad general</span>
        </div>
        <nav>
            <a class="btn" href="/logout">Salir</a>
        </nav>
    </header>

    <main>
        <section>
            <header>
                <h2>Mi resumen</h2>
                <p class="subtle">Créditos aprobados y elegibilidad general.</p>
            </header>
            <p>
                Créditos aprobados: <span id="creditos" class="badge">—</span>
                &nbsp;|&nbsp;
                Materias elegibles ahora: <span id="elegibles" class="badge">—</span>
                de <span id="eligTotal" class="badge">—</span>
            </p>
        </section>

        <section>
            <header>
                <h2>Materias del plan</h2>
                <p class="subtle">Elige tu estado por materia. Se guarda en tu historial.</p>
            </header>

            <table>
                <thead>
                    <tr>
                        <th>Código</th>
                        <th>Nombre</th>
                        <th>Créditos</th>
                        <th>Sem.</th>
                        <th>Elegible</th>
                        <th>Mi estado</th>
                        <th class="row-actions">Acciones</th>
                    </tr>
                </thead>
                <tbody id="materiasBody">
                    <tr>
                        <td colspan="7">Cargando...</td>
                    </tr>
                </tbody>
            </table>
            <p id="sinMaterias" style="display:none">Sin materias.</p>
        </section>

        <section>
            <header>
                <h2>Mi historial</h2>
                <p class="subtle">Estados actuales registrados.</p>
            </header>
            <table>
                <thead>
                    <tr>
                        <th>Código</th>
                        <th>Nombre</th>
                        <th>Estado</th>
                        <th class="row-actions">Acciones</th>
                    </tr>
                </thead>
                <tbody id="historialBody">
                    <tr>
                        <td colspan="4">Cargando...</td>
                    </tr>
                </tbody>
            </table>
        </section>
    </main>

    <!-- Modal de error -->
    <dialog id="dlgError">
        <article>
            <header><strong>Error</strong></header>
            <p id="dlgErrorMsg">Ocurrió un error.</p>
            <footer><button onclick="dlgError.close()">Cerrar</button></footer>
        </article>
    </dialog>

    <!-- Confirm genérico (para choques de horario) -->
    <dialog id="dlgConfirm">
        <article>
            <header><strong>Confirmar</strong></header>
            <div id="dlgConfirmBody"></div>
            <footer>
                <button id="dlgConfirmCancel" class="secondary">Cancelar</button>
                <button id="dlgConfirmOk">Aceptar</button>
            </footer>
        </article>
    </dialog>

    <script>
        // ========= helpers UI =========
        function showError(msg) {
            let d = document.getElementById('dlgError');
            if (!d) {
                d = document.createElement('dialog');
                d.id = 'dlgError';
                d.innerHTML = `
        <article>
          <header><strong>Error</strong></header>
          <p id="dlgErrorMsg"></p>
          <footer><button onclick="dlgError.close()">Cerrar</button></footer>
        </article>`;
                document.body.appendChild(d);
            }
            document.getElementById('dlgErrorMsg').innerHTML = msg || 'Error';
            d.showModal();
        }

        function confirmDialog(html) {
            let d = document.getElementById('dlgConfirm');
            if (!d) {
                d = document.createElement('dialog');
                d.id = 'dlgConfirm';
                d.innerHTML = `
        <article>
          <header><strong>Confirmar</strong></header>
          <div id="dlgConfirmBody"></div>
          <footer>
            <button id="dlgConfirmCancel" class="secondary">Cancelar</button>
            <button id="dlgConfirmOk">Aceptar</button>
          </footer>
        </article>`;
                document.body.appendChild(d);
            }
            return new Promise(resolve => {
                document.getElementById('dlgConfirmBody').innerHTML = html;
                const ok = document.getElementById('dlgConfirmOk');
                const cancel = document.getElementById('dlgConfirmCancel');
                const end = v => { ok.onclick = cancel.onclick = null; d.close(); resolve(v); };
                ok.onclick = () => end(true);
                cancel.onclick = () => end(false);
                d.showModal();
            });
        }

        // ========= auth + fetch =========
        function claims(jwt) {
            try {
                const b = jwt.split('.')[1];
                return JSON.parse(atob(b.replace(/-/g, '+').replace(/_/g, '/')));
            } catch { return {}; }
        }

        async function apiFetch(url, opts = {}) {
            const token = localStorage.access;
            const headers = Object.assign({ 'Content-Type': 'application/json' }, opts.headers || {});
            if (token) headers.Authorization = 'Bearer ' + token;
            const res = await fetch(url, Object.assign({}, opts, { headers }));
            if (!res.ok) {
                const data = await res.json().catch(() => ({}));
                throw new Error(data?.error || ('HTTP ' + res.status));
            }
            return res.json();
        }

        // ========= Estados del MVP =========
        const ESTADOS = ['PENDIENTE', 'EN_CURSO', 'CURSADO', 'A_EXAMEN', 'APROBADO'];
        const RANK = { PENDIENTE: 0, EN_CURSO: 1, CURSADO: 2, A_EXAMEN: 3, APROBADO: 4 };

        // ========= estado en memoria =========
        let materias = [];        // del catálogo
        let historial = [];       // [{ materia, estado }]
        let mapEstado = new Map();// materiaId -> estado actual del usuario
        let eligMap = new Map();// materiaId -> {elegible, motivos[]}
        let userId = null;

        // ========= carga inicial =========
        async function loadAll() {
            const token = localStorage.access;
            if (!token) return location.replace('/login');
            const c = claims(token);
            userId = c.sub;

            // 1) materias (para catálogo + previas + horarios)
            const mres = await apiFetch('/api/materias?limit=1000');       // :contentReference[oaicite:1]{index=1}
            materias = (mres?.items || mres || []).sort((a, b) => (a.codigo || '').localeCompare(b.codigo || ''));

            // 2) historial del usuario
            const hres = await apiFetch(`/api/historial/usuario/${userId}`); // :contentReference[oaicite:2]{index=2}
            historial = Array.isArray(hres) ? hres : (hres?.items || []);
            mapEstado = new Map(historial.map(h => [String(h.materia?._id || h.materia), h.estado]));

            // 3) créditos aprobados
            const cres = await apiFetch('/api/historial/creditos'); // :contentReference[oaicite:3]{index=3}
            document.getElementById('creditos').textContent = cres?.totalCreditos ?? 0;

            // 4) elegibilidad global (si está disponible)
            try {
                const eres = await apiFetch('/elegibilidad');
                const total = eres?.resumen?.totalMaterias ?? materias.length;
                const elegibles = eres?.resumen?.elegibles ?? 0;
                document.getElementById('eligTotal').textContent = total;
                document.getElementById('elegibles').textContent = elegibles;
                eligMap = new Map((eres?.materias || []).map(x => [String(x.materia?._id || x.materia), { elegible: !!x.elegible, motivos: x.motivos || [] }]));
            } catch {
                document.getElementById('eligTotal').textContent = materias.length;
                document.getElementById('elegibles').textContent = '—';
            }

            renderMaterias();
            renderHistorial();
        }

        // ========= verificador local de previas =========
        function getMateria(id) { return materias.find(m => String(m._id) === String(id)); }

        function cumplePreviasLocal(materiaId) {
            const m = getMateria(materiaId);
            if (!m || !Array.isArray(m.previas) || m.previas.length === 0) return { ok: true, motivos: [] };

            const motivos = [];
            for (const p of m.previas) {
                const prevId = typeof p.materia === 'object' ? p.materia._id : p.materia;
                const estadoPrev = mapEstado.get(String(prevId)) || 'PENDIENTE';
                if (p.tipo === 'CURSO') {
                    if (RANK[estadoPrev] < RANK.CURSADO) {
                        const mp = getMateria(prevId);
                        motivos.push(`Requiere CURSADO en <b>${mp?.nombre || mp?.codigo || prevId}</b> (actual: ${estadoPrev}).`);
                    }
                } else if (p.tipo === 'EXAMEN') {
                    if (RANK[estadoPrev] < RANK.APROBADO) {
                        const mp = getMateria(prevId);
                        motivos.push(`Requiere APROBADO en <b>${mp?.nombre || mp?.codigo || prevId}</b> (actual: ${estadoPrev}).`);
                    }
                }
            }
            return { ok: motivos.length === 0, motivos };
        }

        // ========= UI: materias del plan =========
        function renderMaterias() {
            const body = document.getElementById('materiasBody');
            body.innerHTML = '';
            if (!materias.length) {
                document.getElementById('sinMaterias').style.display = 'block';
                body.innerHTML = '<tr><td colspan="7">Sin materias.</td></tr>';
                return;
            }
            document.getElementById('sinMaterias').style.display = 'none';

            for (const m of materias) {
                const id = String(m._id);
                const estadoActual = mapEstado.get(id) || 'PENDIENTE';
                const elig = eligMap.get(id);
                const elegible = elig ? elig.elegible : '—';

                const tr = document.createElement('tr');
                tr.innerHTML = `
        <td>${m.codigo || ''}</td>
        <td>${m.nombre || ''}</td>
        <td>${m.creditos ?? '-'}</td>
        <td>${m.semestre ?? '-'}</td>
        <td>${elegible === '—' ? '—'
                        : elegible ? '<span class="pill ok">Sí</span>'
                            : '<span class="pill no" title="' + (elig?.motivos?.join(' · ') || 'No elegible') + '">No</span>'
                    }</td>
        <td>
          <select data-id="${id}">
            ${ESTADOS.map(e => `<option value="${e}" ${e === estadoActual ? 'selected' : ''}>${e}</option>`).join('')}
          </select>
        </td>
        <td class="row-actions">
          <button data-save="${id}">Guardar</button>
        </td>
      `;
                body.appendChild(tr);
            }

            // Guardar (con reglas)
            body.querySelectorAll('button[data-save]').forEach(btn => {
                btn.addEventListener('click', async () => onGuardarMateria(btn));
            });
        }

        // ========= UI: historial =========
        function renderHistorial() {
            const body = document.getElementById('historialBody');
            body.innerHTML = '';
            // ocultamos PENDIENTE del historial
            const hs = historial.filter(h => h.estado !== 'PENDIENTE');
            if (!hs.length) {
                body.innerHTML = '<tr><td colspan="4">Aún no registraste materias en tu historial.</td></tr>';
                return;
            }
            const mById = new Map(materias.map(m => [String(m._id), m]));
            for (const h of hs) {
                const id = String(h.materia?._id || h.materia);
                const m = mById.get(id) || {};
                const tr = document.createElement('tr');
                tr.innerHTML = `
        <td>${m.codigo || ''}</td>
        <td>${m.nombre || ''}</td>
        <td>
          <select data-hid="${id}">
            ${ESTADOS.map(e => `<option value="${e}" ${e === h.estado ? 'selected' : ''}>${e}</option>`).join('')}
          </select>
        </td>
        <td class="row-actions">
          <button data-update="${id}">Actualizar</button>
          <button class="secondary" data-del="${id}">Eliminar</button>
        </td>
      `;
                body.appendChild(tr);
            }

            body.querySelectorAll('button[data-update]').forEach(btn => {
                btn.addEventListener('click', async () => {
                    const id = btn.getAttribute('data-update');
                    const sel = body.querySelector(`select[data-hid="${id}"]`);
                    const estado = sel.value;
                    try {
                        await attemptUpsert(id, estado);
                        await loadAll();
                    } catch (err) {
                        showError(err.message || 'No se pudo actualizar');
                    }
                });
            });

            body.querySelectorAll('button[data-del]').forEach(btn => {
                btn.addEventListener('click', async () => {
                    const id = btn.getAttribute('data-del');
                    const ok = await confirmDialog('<p>¿Eliminar esta materia de tu historial?</p>');
                    if (!ok) return;
                    try {
                        // “Eliminar lógico”: dejamos PENDIENTE => desaparece del historial
                        await apiFetch('/api/historial/upsert', {
                            method: 'POST',
                            body: JSON.stringify({ materia: id, estado: 'PENDIENTE' })
                        });                                           // :contentReference[oaicite:4]{index=4}
                        await loadAll();
                    } catch (err) {
                        showError(err.message || 'No se pudo eliminar');
                    }
                });
            });
        }

        // ========= LÓGICA DE NEGOCIO (reglas) =========
        async function attemptUpsert(materiaId, estado) {
            // Estados que exigen previas aprobadas
            const exigePrevias = ['EN_CURSO', 'CURSADO', 'A_EXAMEN', 'APROBADO'].includes(estado);

            if (exigePrevias) {
                // 1) verificación local de previas
                const local = cumplePreviasLocal(materiaId);
                // 2) si el endpoint /elegibilidad está disponible y dice "no", lo consideramos también
                const eleg = eligMap.get(materiaId);
                const motivos = [];
                if (!local.ok) motivos.push(...local.motivos);
                if (eleg && eleg.elegible === false) motivos.push(...(eleg.motivos || []));
                if (motivos.length) {
                    showError(
                        `<p>No podés poner <b>${estado}</b> en esta materia aún:</p>
           <div style="margin-top:.5rem">${motivos.map(m => `• ${m}`).join('<br/>')}</div>`
                    );
                    return;
                }
            }

            // Choques de horario sólo para EN_CURSO
            if (estado === 'EN_CURSO') {
                const seleccionadas = [...mapEstado.entries()]
                    .filter(([_, st]) => st === 'EN_CURSO')
                    .map(([mid]) => mid);
                if (!seleccionadas.includes(materiaId)) seleccionadas.push(materiaId);

                try {
                    const vr = await apiFetch('/seleccion/verificar', {
                        method: 'POST',
                        body: JSON.stringify({ materias: seleccionadas })
                    });
                    if (vr?.resumen?.conflictos > 0) {
                        const detalle = Array.isArray(vr?.conflictos)
                            ? `<pre>${vr.conflictos.map(c => `• ${c.mensaje || c.detalle || JSON.stringify(c)}`).join('\n')}</pre>`
                            : '';
                        const ok = await confirmDialog(
                            `<p>Se detectaron <b>${vr.resumen.conflictos}</b> conflicto(s) de horario.</p>${detalle}<p>¿Deseás continuar igualmente?</p>`
                        );
                        if (!ok) return;
                    }
                } catch {
                    showError('No se pudo verificar choques de horario.');
                    return;
                }
            }

            // Guardar (upsert historial del usuario autenticado)
            await apiFetch('/api/historial/upsert', {
                method: 'POST',
                body: JSON.stringify({ materia: materiaId, estado })
            }); // ruta disponible en /api/historial/upsert  :contentReference[oaicite:5]{index=5}

            mapEstado.set(materiaId, estado);
        }

        async function onGuardarMateria(btn) {
            const id = btn.getAttribute('data-save');
            const sel = document.querySelector(`select[data-id="${id}"]`);
            const estado = sel.value;
            try {
                await attemptUpsert(id, estado);
                await loadAll(); // refresca créditos, elegibilidad e historial
            } catch (err) {
                showError(err.message || 'No se pudo guardar');
            }
        }

        // ========= init =========
        loadAll().catch(err => showError(err.message || 'No se pudo cargar'));
    </script>


</body>

</html>